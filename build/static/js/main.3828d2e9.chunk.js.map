{"version":3,"sources":["utils/API.js","components/searchBar/SearchBar.js","components/header/Header.js","components/table/EmployeeTable.js","components/wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchBar","props","placeholder","onChange","handleInputChange","value","id","type","className","Header","EmployeeTable","Table","striped","bordered","hover","variant","onClick","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","name","first","last","cell","href","email","format","dob","date","Wrapper","state","search","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","handleSearch","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3828d2e9.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport default {\n    getUsers: function(){\n        return axios.get(`https://randomuser.me/api/?results=200&?nat=us`)\n    }\n}","import React from \"react\";\nimport \"./style.css\"\n\n\nfunction SearchBar(props) {\n    return (\n        <div>\n            <form>\n                <input placeholder=\"Search\" \n                  onChange={props.handleInputChange}\n                  value={props.value}\n                  id=\"employee\"\n                  type=\"text\"\n                  className=\"inputBox\"\n                  placeholder=\"Search by name\" \n                  />\n            </form>\n        </div>\n    )\n}\nexport default SearchBar;","import React from \"react\";\nimport SearchBar from \"../searchBar/SearchBar\";\nimport \"./style.css\"\n\n\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n           <h1>Employee Directory</h1>\n           <p>Click on carrots to filter by heading or use the search box to narrow your results.</p>\n           {/* <SearchBar\n           /> */}\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\nimport Moment from 'react-moment';\nimport { Table } from \"react-bootstrap\";\n\nlet EmployeeTable = (props) => {\n  return (\n    <Table striped bordered hover variant=\"dark\" className=\"employeeTable\">\n      <thead>\n        <tr>\n          <th>Employee Image</th>\n          <th onClick={props.sortByName}>Name</th>\n          <th>Phone</th>\n          <th>E-mail</th>\n          <th>DOB</th>\n        </tr>\n      </thead>\n\n      <tbody className=\"\">\n        {props.results.map((result) => (\n          <tr className=\"table\" key={result.login.uuid}>\n            <td>\n              {\" \"}\n              <img\n                className=\"\"\n                src={result.picture.medium}\n                alt=\"\"\n              />\n            </td>\n\n            <td>{result.name.first + \" \" + result.name.last} </td>\n\n            <td>{result.cell}</td>\n            <td className=\"email\">\n              <a href={result.email}>{result.email}</a>\n            </td>\n            <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default EmployeeTable;\n","// use .map\nimport React from \"react\";\nimport API from \"../../utils/API\";\nimport Header from \"../header/Header\";\nimport EmployeeTable from \"../table/EmployeeTable\";\nimport { Component } from \"react\";\nimport SearchBar from \"../searchBar/SearchBar\";\n\nclass Wrapper extends Component {\n  // Setting the component's initial state\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees: [],\n    order: \"\",\n  };\n  // this is what will be displayed when page is loaded\n  componentDidMount() {\n    API.getUsers()\n      .then((res) =>\n        this.setState({\n          employees: res.data.results,\n          filteredEmployees: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  }\n\n  sortByName = () => {\n    const filtereds = this.state.filteredEmployees;\n    if (this.state.order === \"asc\") {\n      const sorteds = filtereds.sort((a, b) =>\n        a.name.first > b.name.first ? 1 : -1\n      );\n      console.log(sorteds);\n\n      this.setState({\n        filteredEmployees: sorteds,\n        order: \"desc\",\n      });\n    } else {\n      const sorteds = filtereds.sort((a, b) =>\n        a.name.first > b.name.first ? -1 : 1\n      );\n      console.log(sorteds);\n\n      this.setState({\n        filteredEmployees: sorteds,\n        order: \"asc\",\n      });\n    }\n  };\n\n  handleInputChange = (event) => {\n    const employees = this.state.employees;\n    const UserInput = event.target.value;\n    const filteredEmployees = employees.filter(\n      (employee) =>\n        employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\n    );\n    this.setState({\n      filteredEmployees,\n    });\n  };\n\n  // API call to randomuser.me\n  employeeSearch = () => {\n    API.getUsers()\n      .then((res) => {\n        console.log(\"employee data\", res);\n        this.setState({\n          employees: res.data.results,\n          filteredEmployees: res.data.results,\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  handleSearch = (event) => {\n    event.preventDefault();\n    if (!this.state.search) {\n      alert(\"Enter a name\");\n    }\n    const { employees, search } = this.state;\n    const filteredEmployees = employees.filter((employee) =>\n      employee.name.first.toLowerCase().includes(search.toLowerCase())\n    );\n    this.setState({\n      filteredEmployees,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <SearchBar\n          employee={this.state.employees}\n          handleSearch={this.handleSearch}\n          handleInputChange={this.handleInputChange}\n        />\n        <EmployeeTable\n          results={this.state.filteredEmployees}\n          sortByName={this.sortByName}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport Wrapper from \"./components/wrapper/Wrapper\"\n// import logo from './logo.svg';\nimport Header from \"./components/header/Header\"\nimport EmployeeTable from \"./components/table/EmployeeTable\"\nimport './App.css';\nimport API from \"../src/utils/API\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      < Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}